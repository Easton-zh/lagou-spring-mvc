web.xml

  <servlet-mapping>
    <servlet-name>springmvc</servlet-name>
      <!--
            方式一：带后缀，比如*.action  *.do *.aaa
                   该种方式比较精确、方便，在以前和现在企业中都有很大的使用比例
            方式二：/ 不会拦截 .jsp，但是会拦截.html等静态资源（静态资源：除了servlet和jsp之外的js、css、png等）

                  1.为什么配置为/ 会拦截静态资源？？？
                      因为tomcat容器中有一个web.xml（父），你的项目中也有一个web.xml（子），是一个继承关系
                            父web.xml中有一个DefaultServlet,  url-pattern 是一个 /
                            此时我们自己的web.xml中也配置了一个 / ,覆写了父web.xml的配置
                  2.为什么不拦截.jsp呢？
                      因为父web.xml中有一个JspServlet，这个servlet拦截.jsp文件，而我们并没有覆写这个配置，
                      所以springmvc此时不拦截jsp，jsp的处理交给了tomcat

                  3.如何解决/拦截静态资源这件事？
                        解决方案两种：springmvc.xml


            方式三：/* 拦截所有，包括.jsp
          -->
      <!--拦截匹配规则的url请求，进入springmvc框架处理-->
    <url-pattern>/</url-pattern>
  </servlet-mapping>

springmvc.xml

    <!--3.如何解决/拦截静态资源这件事？-->
    <!--静态资源配置，方案一-->
    <!--
        原理：添加该标签配置之后，会在SpringMVC上下文中定义一个DefaultServletHttpRequestHandler对象
             这个对象如同一个检查人员，对进入DispatcherServlet的url请求进行过滤筛查，如果发现是一个静态资源请求
             那么会把请求转由web应用服务器（tomcat）默认的DefaultServlet来处理，如果不是静态资源请求，那么继续由
             SpringMVC框架处理
        局限性：.html 只能放到webapp下面，放其他工程文件夹下则拦截不到
    -->
    <mvc:default-servlet-handler/>

    <!--静态资源配置，方案二，SpringMVC框架自己处理静态资源
        mapping:约定的静态资源的url规则
        location：指定的静态资源的存放位置

    -->
    <mvc:resources location="classpath:/"  mapping="/resources/**"/>
    <mvc:resources location="/WEB-INF/js/" mapping="/js/**"/>